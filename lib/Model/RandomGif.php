<?php
/**
 * RandomGif
 *
 * PHP version 5
 *
 * @category Class
 * @package  GPH
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * giphy-api
 *
 * Giphy's public api.
 *
 * OpenAPI spec version: 0.9.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GPH\Model;

use \ArrayAccess;

/**
 * RandomGif Class Doc Comment
 *
 * @category    Class
 * @description An object containing data that describes GIFs returned by the query.
 * @package     GPH
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RandomGif implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RandomGif';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'id' => 'string',
        'url' => 'string',
        'image_original_url' => 'string',
        'image_url' => 'string',
        'image_mp4_url' => 'string',
        'image_frames' => 'string',
        'image_width' => 'string',
        'image_height' => 'string',
        'fixed_height_downsampled_url' => 'string',
        'fixed_height_downsampled_width' => 'string',
        'fixed_height_downsampled_height' => 'string',
        'fixed_width_downsampled_url' => 'string',
        'fixed_width_downsampled_width' => 'string',
        'fixed_width_downsampled_height' => 'string',
        'fixed_height_small_url' => 'string',
        'fixed_height_small_still_url' => 'string',
        'fixed_height_small_width' => 'string',
        'fixed_height_small_height' => 'string',
        'fixed_width_small_url' => 'string',
        'fixed_width_small_still_url' => 'string',
        'fixed_width_small_width' => 'string',
        'fixed_width_small_height' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'url' => 'url',
        'image_original_url' => 'image_original_url',
        'image_url' => 'image_url',
        'image_mp4_url' => 'image_mp4_url',
        'image_frames' => 'image_frames',
        'image_width' => 'image_width',
        'image_height' => 'image_height',
        'fixed_height_downsampled_url' => 'fixed_height_downsampled_url',
        'fixed_height_downsampled_width' => 'fixed_height_downsampled_width',
        'fixed_height_downsampled_height' => 'fixed_height_downsampled_height',
        'fixed_width_downsampled_url' => 'fixed_width_downsampled_url',
        'fixed_width_downsampled_width' => 'fixed_width_downsampled_width',
        'fixed_width_downsampled_height' => 'fixed_width_downsampled_height',
        'fixed_height_small_url' => 'fixed_height_small_url',
        'fixed_height_small_still_url' => 'fixed_height_small_still_url',
        'fixed_height_small_width' => 'fixed_height_small_width',
        'fixed_height_small_height' => 'fixed_height_small_height',
        'fixed_width_small_url' => 'fixed_width_small_url',
        'fixed_width_small_still_url' => 'fixed_width_small_still_url',
        'fixed_width_small_width' => 'fixed_width_small_width',
        'fixed_width_small_height' => 'fixed_width_small_height'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'url' => 'setUrl',
        'image_original_url' => 'setImageOriginalUrl',
        'image_url' => 'setImageUrl',
        'image_mp4_url' => 'setImageMp4Url',
        'image_frames' => 'setImageFrames',
        'image_width' => 'setImageWidth',
        'image_height' => 'setImageHeight',
        'fixed_height_downsampled_url' => 'setFixedHeightDownsampledUrl',
        'fixed_height_downsampled_width' => 'setFixedHeightDownsampledWidth',
        'fixed_height_downsampled_height' => 'setFixedHeightDownsampledHeight',
        'fixed_width_downsampled_url' => 'setFixedWidthDownsampledUrl',
        'fixed_width_downsampled_width' => 'setFixedWidthDownsampledWidth',
        'fixed_width_downsampled_height' => 'setFixedWidthDownsampledHeight',
        'fixed_height_small_url' => 'setFixedHeightSmallUrl',
        'fixed_height_small_still_url' => 'setFixedHeightSmallStillUrl',
        'fixed_height_small_width' => 'setFixedHeightSmallWidth',
        'fixed_height_small_height' => 'setFixedHeightSmallHeight',
        'fixed_width_small_url' => 'setFixedWidthSmallUrl',
        'fixed_width_small_still_url' => 'setFixedWidthSmallStillUrl',
        'fixed_width_small_width' => 'setFixedWidthSmallWidth',
        'fixed_width_small_height' => 'setFixedWidthSmallHeight'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'url' => 'getUrl',
        'image_original_url' => 'getImageOriginalUrl',
        'image_url' => 'getImageUrl',
        'image_mp4_url' => 'getImageMp4Url',
        'image_frames' => 'getImageFrames',
        'image_width' => 'getImageWidth',
        'image_height' => 'getImageHeight',
        'fixed_height_downsampled_url' => 'getFixedHeightDownsampledUrl',
        'fixed_height_downsampled_width' => 'getFixedHeightDownsampledWidth',
        'fixed_height_downsampled_height' => 'getFixedHeightDownsampledHeight',
        'fixed_width_downsampled_url' => 'getFixedWidthDownsampledUrl',
        'fixed_width_downsampled_width' => 'getFixedWidthDownsampledWidth',
        'fixed_width_downsampled_height' => 'getFixedWidthDownsampledHeight',
        'fixed_height_small_url' => 'getFixedHeightSmallUrl',
        'fixed_height_small_still_url' => 'getFixedHeightSmallStillUrl',
        'fixed_height_small_width' => 'getFixedHeightSmallWidth',
        'fixed_height_small_height' => 'getFixedHeightSmallHeight',
        'fixed_width_small_url' => 'getFixedWidthSmallUrl',
        'fixed_width_small_still_url' => 'getFixedWidthSmallStillUrl',
        'fixed_width_small_width' => 'getFixedWidthSmallWidth',
        'fixed_width_small_height' => 'getFixedWidthSmallHeight'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'gif';
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image_original_url'] = isset($data['image_original_url']) ? $data['image_original_url'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['image_mp4_url'] = isset($data['image_mp4_url']) ? $data['image_mp4_url'] : null;
        $this->container['image_frames'] = isset($data['image_frames']) ? $data['image_frames'] : null;
        $this->container['image_width'] = isset($data['image_width']) ? $data['image_width'] : null;
        $this->container['image_height'] = isset($data['image_height']) ? $data['image_height'] : null;
        $this->container['fixed_height_downsampled_url'] = isset($data['fixed_height_downsampled_url']) ? $data['fixed_height_downsampled_url'] : null;
        $this->container['fixed_height_downsampled_width'] = isset($data['fixed_height_downsampled_width']) ? $data['fixed_height_downsampled_width'] : null;
        $this->container['fixed_height_downsampled_height'] = isset($data['fixed_height_downsampled_height']) ? $data['fixed_height_downsampled_height'] : null;
        $this->container['fixed_width_downsampled_url'] = isset($data['fixed_width_downsampled_url']) ? $data['fixed_width_downsampled_url'] : null;
        $this->container['fixed_width_downsampled_width'] = isset($data['fixed_width_downsampled_width']) ? $data['fixed_width_downsampled_width'] : null;
        $this->container['fixed_width_downsampled_height'] = isset($data['fixed_width_downsampled_height']) ? $data['fixed_width_downsampled_height'] : null;
        $this->container['fixed_height_small_url'] = isset($data['fixed_height_small_url']) ? $data['fixed_height_small_url'] : null;
        $this->container['fixed_height_small_still_url'] = isset($data['fixed_height_small_still_url']) ? $data['fixed_height_small_still_url'] : null;
        $this->container['fixed_height_small_width'] = isset($data['fixed_height_small_width']) ? $data['fixed_height_small_width'] : null;
        $this->container['fixed_height_small_height'] = isset($data['fixed_height_small_height']) ? $data['fixed_height_small_height'] : null;
        $this->container['fixed_width_small_url'] = isset($data['fixed_width_small_url']) ? $data['fixed_width_small_url'] : null;
        $this->container['fixed_width_small_still_url'] = isset($data['fixed_width_small_still_url']) ? $data['fixed_width_small_still_url'] : null;
        $this->container['fixed_width_small_width'] = isset($data['fixed_width_small_width']) ? $data['fixed_width_small_width'] : null;
        $this->container['fixed_width_small_height'] = isset($data['fixed_width_small_height']) ? $data['fixed_width_small_height'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type By default, this is almost always gif
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id This GIF's unique ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url The URL for this preview GIF.
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image_original_url
     * @return string
     */
    public function getImageOriginalUrl()
    {
        return $this->container['image_original_url'];
    }

    /**
     * Sets image_original_url
     * @param string $image_original_url The URL for the original preview GIF.
     * @return $this
     */
    public function setImageOriginalUrl($image_original_url)
    {
        $this->container['image_original_url'] = $image_original_url;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url The URL for this preview GIF.
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_mp4_url
     * @return string
     */
    public function getImageMp4Url()
    {
        return $this->container['image_mp4_url'];
    }

    /**
     * Sets image_mp4_url
     * @param string $image_mp4_url The URL for this preview GIF.
     * @return $this
     */
    public function setImageMp4Url($image_mp4_url)
    {
        $this->container['image_mp4_url'] = $image_mp4_url;

        return $this;
    }

    /**
     * Gets image_frames
     * @return string
     */
    public function getImageFrames()
    {
        return $this->container['image_frames'];
    }

    /**
     * Sets image_frames
     * @param string $image_frames The number of frames in this GIF.
     * @return $this
     */
    public function setImageFrames($image_frames)
    {
        $this->container['image_frames'] = $image_frames;

        return $this;
    }

    /**
     * Gets image_width
     * @return string
     */
    public function getImageWidth()
    {
        return $this->container['image_width'];
    }

    /**
     * Sets image_width
     * @param string $image_width The width of this GIF.
     * @return $this
     */
    public function setImageWidth($image_width)
    {
        $this->container['image_width'] = $image_width;

        return $this;
    }

    /**
     * Gets image_height
     * @return string
     */
    public function getImageHeight()
    {
        return $this->container['image_height'];
    }

    /**
     * Sets image_height
     * @param string $image_height The height of this GIF.
     * @return $this
     */
    public function setImageHeight($image_height)
    {
        $this->container['image_height'] = $image_height;

        return $this;
    }

    /**
     * Gets fixed_height_downsampled_url
     * @return string
     */
    public function getFixedHeightDownsampledUrl()
    {
        return $this->container['fixed_height_downsampled_url'];
    }

    /**
     * Sets fixed_height_downsampled_url
     * @param string $fixed_height_downsampled_url A version of this GIF with a fixed height of 200 pixels and the number of frames reduced to 6.
     * @return $this
     */
    public function setFixedHeightDownsampledUrl($fixed_height_downsampled_url)
    {
        $this->container['fixed_height_downsampled_url'] = $fixed_height_downsampled_url;

        return $this;
    }

    /**
     * Gets fixed_height_downsampled_width
     * @return string
     */
    public function getFixedHeightDownsampledWidth()
    {
        return $this->container['fixed_height_downsampled_width'];
    }

    /**
     * Sets fixed_height_downsampled_width
     * @param string $fixed_height_downsampled_width
     * @return $this
     */
    public function setFixedHeightDownsampledWidth($fixed_height_downsampled_width)
    {
        $this->container['fixed_height_downsampled_width'] = $fixed_height_downsampled_width;

        return $this;
    }

    /**
     * Gets fixed_height_downsampled_height
     * @return string
     */
    public function getFixedHeightDownsampledHeight()
    {
        return $this->container['fixed_height_downsampled_height'];
    }

    /**
     * Sets fixed_height_downsampled_height
     * @param string $fixed_height_downsampled_height
     * @return $this
     */
    public function setFixedHeightDownsampledHeight($fixed_height_downsampled_height)
    {
        $this->container['fixed_height_downsampled_height'] = $fixed_height_downsampled_height;

        return $this;
    }

    /**
     * Gets fixed_width_downsampled_url
     * @return string
     */
    public function getFixedWidthDownsampledUrl()
    {
        return $this->container['fixed_width_downsampled_url'];
    }

    /**
     * Sets fixed_width_downsampled_url
     * @param string $fixed_width_downsampled_url A version of this GIF with a fixed width of 200 pixels and the number of frames reduced to 6.
     * @return $this
     */
    public function setFixedWidthDownsampledUrl($fixed_width_downsampled_url)
    {
        $this->container['fixed_width_downsampled_url'] = $fixed_width_downsampled_url;

        return $this;
    }

    /**
     * Gets fixed_width_downsampled_width
     * @return string
     */
    public function getFixedWidthDownsampledWidth()
    {
        return $this->container['fixed_width_downsampled_width'];
    }

    /**
     * Sets fixed_width_downsampled_width
     * @param string $fixed_width_downsampled_width
     * @return $this
     */
    public function setFixedWidthDownsampledWidth($fixed_width_downsampled_width)
    {
        $this->container['fixed_width_downsampled_width'] = $fixed_width_downsampled_width;

        return $this;
    }

    /**
     * Gets fixed_width_downsampled_height
     * @return string
     */
    public function getFixedWidthDownsampledHeight()
    {
        return $this->container['fixed_width_downsampled_height'];
    }

    /**
     * Sets fixed_width_downsampled_height
     * @param string $fixed_width_downsampled_height
     * @return $this
     */
    public function setFixedWidthDownsampledHeight($fixed_width_downsampled_height)
    {
        $this->container['fixed_width_downsampled_height'] = $fixed_width_downsampled_height;

        return $this;
    }

    /**
     * Gets fixed_height_small_url
     * @return string
     */
    public function getFixedHeightSmallUrl()
    {
        return $this->container['fixed_height_small_url'];
    }

    /**
     * Sets fixed_height_small_url
     * @param string $fixed_height_small_url A version of this GIF with a fixed height of 100 pixels and the number of frames reduced to 6.
     * @return $this
     */
    public function setFixedHeightSmallUrl($fixed_height_small_url)
    {
        $this->container['fixed_height_small_url'] = $fixed_height_small_url;

        return $this;
    }

    /**
     * Gets fixed_height_small_still_url
     * @return string
     */
    public function getFixedHeightSmallStillUrl()
    {
        return $this->container['fixed_height_small_still_url'];
    }

    /**
     * Sets fixed_height_small_still_url
     * @param string $fixed_height_small_still_url A still version of this gif.
     * @return $this
     */
    public function setFixedHeightSmallStillUrl($fixed_height_small_still_url)
    {
        $this->container['fixed_height_small_still_url'] = $fixed_height_small_still_url;

        return $this;
    }

    /**
     * Gets fixed_height_small_width
     * @return string
     */
    public function getFixedHeightSmallWidth()
    {
        return $this->container['fixed_height_small_width'];
    }

    /**
     * Sets fixed_height_small_width
     * @param string $fixed_height_small_width
     * @return $this
     */
    public function setFixedHeightSmallWidth($fixed_height_small_width)
    {
        $this->container['fixed_height_small_width'] = $fixed_height_small_width;

        return $this;
    }

    /**
     * Gets fixed_height_small_height
     * @return string
     */
    public function getFixedHeightSmallHeight()
    {
        return $this->container['fixed_height_small_height'];
    }

    /**
     * Sets fixed_height_small_height
     * @param string $fixed_height_small_height
     * @return $this
     */
    public function setFixedHeightSmallHeight($fixed_height_small_height)
    {
        $this->container['fixed_height_small_height'] = $fixed_height_small_height;

        return $this;
    }

    /**
     * Gets fixed_width_small_url
     * @return string
     */
    public function getFixedWidthSmallUrl()
    {
        return $this->container['fixed_width_small_url'];
    }

    /**
     * Sets fixed_width_small_url
     * @param string $fixed_width_small_url
     * @return $this
     */
    public function setFixedWidthSmallUrl($fixed_width_small_url)
    {
        $this->container['fixed_width_small_url'] = $fixed_width_small_url;

        return $this;
    }

    /**
     * Gets fixed_width_small_still_url
     * @return string
     */
    public function getFixedWidthSmallStillUrl()
    {
        return $this->container['fixed_width_small_still_url'];
    }

    /**
     * Sets fixed_width_small_still_url
     * @param string $fixed_width_small_still_url A still version of this GIF with a fixed width of 100 pixels.
     * @return $this
     */
    public function setFixedWidthSmallStillUrl($fixed_width_small_still_url)
    {
        $this->container['fixed_width_small_still_url'] = $fixed_width_small_still_url;

        return $this;
    }

    /**
     * Gets fixed_width_small_width
     * @return string
     */
    public function getFixedWidthSmallWidth()
    {
        return $this->container['fixed_width_small_width'];
    }

    /**
     * Sets fixed_width_small_width
     * @param string $fixed_width_small_width
     * @return $this
     */
    public function setFixedWidthSmallWidth($fixed_width_small_width)
    {
        $this->container['fixed_width_small_width'] = $fixed_width_small_width;

        return $this;
    }

    /**
     * Gets fixed_width_small_height
     * @return string
     */
    public function getFixedWidthSmallHeight()
    {
        return $this->container['fixed_width_small_height'];
    }

    /**
     * Sets fixed_width_small_height
     * @param string $fixed_width_small_height
     * @return $this
     */
    public function setFixedWidthSmallHeight($fixed_width_small_height)
    {
        $this->container['fixed_width_small_height'] = $fixed_width_small_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GPH\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GPH\ObjectSerializer::sanitizeForSerialization($this));
    }
}


