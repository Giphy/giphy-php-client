<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  GPH
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * giphy-api
 *
 * Giphy's public api.
 *
 * OpenAPI spec version: 0.9.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GPH\Api;

use \GPH\ApiClient;
use \GPH\ApiException;
use \GPH\Configuration;
use \GPH\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  GPH
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \GPH\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \GPH\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\GPH\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \GPH\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \GPH\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\GPH\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation gifsCategoriesCategoryGet
     *
     * Category Tags Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $category Filters results by category. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2004
     */
    public function gifsCategoriesCategoryGet($api_key, $category, $limit = null, $offset = null)
    {
        list($response) = $this->gifsCategoriesCategoryGetWithHttpInfo($api_key, $category, $limit, $offset);
        return $response;
    }

    /**
     * Operation gifsCategoriesCategoryGetWithHttpInfo
     *
     * Category Tags Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $category Filters results by category. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsCategoriesCategoryGetWithHttpInfo($api_key, $category, $limit = null, $offset = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsCategoriesCategoryGet');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling gifsCategoriesCategoryGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesCategoryGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesCategoryGet, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset > 100)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsCategoriesCategoryGet, must be smaller than or equal to 100.');
        }
        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsCategoriesCategoryGet, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/gifs/categories/{category}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // path params
        if ($category !== null) {
            $resourcePath = str_replace(
                "{" . "category" . "}",
                $this->apiClient->getSerializer()->toPathValue($category),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2004',
                '/gifs/categories/{category}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsCategoriesCategoryTagGet
     *
     * Tagged Gifs Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $category Filters results by category. (required)
     * @param string $tag Filters results by tag. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2005
     */
    public function gifsCategoriesCategoryTagGet($api_key, $category, $tag, $limit = null, $offset = null)
    {
        list($response) = $this->gifsCategoriesCategoryTagGetWithHttpInfo($api_key, $category, $tag, $limit, $offset);
        return $response;
    }

    /**
     * Operation gifsCategoriesCategoryTagGetWithHttpInfo
     *
     * Tagged Gifs Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $category Filters results by category. (required)
     * @param string $tag Filters results by tag. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsCategoriesCategoryTagGetWithHttpInfo($api_key, $category, $tag, $limit = null, $offset = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsCategoriesCategoryTagGet');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling gifsCategoriesCategoryTagGet');
        }
        // verify the required parameter 'tag' is set
        if ($tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag when calling gifsCategoriesCategoryTagGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesCategoryTagGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesCategoryTagGet, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset > 100)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsCategoriesCategoryTagGet, must be smaller than or equal to 100.');
        }
        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsCategoriesCategoryTagGet, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/gifs/categories/{category}/{tag}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // path params
        if ($category !== null) {
            $resourcePath = str_replace(
                "{" . "category" . "}",
                $this->apiClient->getSerializer()->toPathValue($category),
                $resourcePath
            );
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace(
                "{" . "tag" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2005',
                '/gifs/categories/{category}/{tag}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsCategoriesGet
     *
     * Categories Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2003
     */
    public function gifsCategoriesGet($api_key, $limit = null)
    {
        list($response) = $this->gifsCategoriesGetWithHttpInfo($api_key, $limit);
        return $response;
    }

    /**
     * Operation gifsCategoriesGetWithHttpInfo
     *
     * Categories Endpoint.
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsCategoriesGetWithHttpInfo($api_key, $limit = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsCategoriesGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsCategoriesGet, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/gifs/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2003',
                '/gifs/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsGet
     *
     * Get GIFs by ID Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $ids Filters results by specified GIF IDs, separated by commas. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse200
     */
    public function gifsGet($api_key, $ids)
    {
        list($response) = $this->gifsGetWithHttpInfo($api_key, $ids);
        return $response;
    }

    /**
     * Operation gifsGetWithHttpInfo
     *
     * Get GIFs by ID Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $ids Filters results by specified GIF IDs, separated by commas. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsGetWithHttpInfo($api_key, $ids)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsGet');
        }
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling gifsGet');
        }
        // parse inputs
        $resourcePath = "/gifs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($ids !== null) {
            $queryParams['ids'] = $this->apiClient->getSerializer()->toQueryValue($ids);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse200',
                '/gifs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsGifIdGet
     *
     * Get GIF by ID Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $gif_id Filters results by specified GIF ID. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2001
     */
    public function gifsGifIdGet($api_key, $gif_id)
    {
        list($response) = $this->gifsGifIdGetWithHttpInfo($api_key, $gif_id);
        return $response;
    }

    /**
     * Operation gifsGifIdGetWithHttpInfo
     *
     * Get GIF by ID Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $gif_id Filters results by specified GIF ID. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsGifIdGetWithHttpInfo($api_key, $gif_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsGifIdGet');
        }
        // verify the required parameter 'gif_id' is set
        if ($gif_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $gif_id when calling gifsGifIdGet');
        }
        // parse inputs
        $resourcePath = "/gifs/{gif_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // path params
        if ($gif_id !== null) {
            $resourcePath = str_replace(
                "{" . "gif_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($gif_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2001',
                '/gifs/{gif_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsRandomGet
     *
     * Random Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $tag Filters results by specified tag. (optional)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2002
     */
    public function gifsRandomGet($api_key, $tag = null, $rating = null, $fmt = null)
    {
        list($response) = $this->gifsRandomGetWithHttpInfo($api_key, $tag, $rating, $fmt);
        return $response;
    }

    /**
     * Operation gifsRandomGetWithHttpInfo
     *
     * Random Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $tag Filters results by specified tag. (optional)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsRandomGetWithHttpInfo($api_key, $tag = null, $rating = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsRandomGet');
        }
        // parse inputs
        $resourcePath = "/gifs/random";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = $this->apiClient->getSerializer()->toQueryValue($tag);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2002',
                '/gifs/random'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsSearchGet
     *
     * Search Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $q Search query term or prhase. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse200
     */
    public function gifsSearchGet($api_key, $q, $limit = null, $offset = null, $rating = null, $lang = null, $fmt = null)
    {
        list($response) = $this->gifsSearchGetWithHttpInfo($api_key, $q, $limit, $offset, $rating, $lang, $fmt);
        return $response;
    }

    /**
     * Operation gifsSearchGetWithHttpInfo
     *
     * Search Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $q Search query term or prhase. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsSearchGetWithHttpInfo($api_key, $q, $limit = null, $offset = null, $rating = null, $lang = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsSearchGet');
        }
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling gifsSearchGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsSearchGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsSearchGet, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset > 100)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsSearchGet, must be smaller than or equal to 100.');
        }
        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.gifsSearchGet, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/gifs/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse200',
                '/gifs/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsTranslateGet
     *
     * Translate Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $s Search term. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2001
     */
    public function gifsTranslateGet($api_key, $s)
    {
        list($response) = $this->gifsTranslateGetWithHttpInfo($api_key, $s);
        return $response;
    }

    /**
     * Operation gifsTranslateGetWithHttpInfo
     *
     * Translate Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $s Search term. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsTranslateGetWithHttpInfo($api_key, $s)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsTranslateGet');
        }
        // verify the required parameter 's' is set
        if ($s === null) {
            throw new \InvalidArgumentException('Missing the required parameter $s when calling gifsTranslateGet');
        }
        // parse inputs
        $resourcePath = "/gifs/translate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($s !== null) {
            $queryParams['s'] = $this->apiClient->getSerializer()->toQueryValue($s);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2001',
                '/gifs/translate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gifsTrendingGet
     *
     * Trending GIFs Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse200
     */
    public function gifsTrendingGet($api_key, $limit = null, $rating = null, $fmt = null)
    {
        list($response) = $this->gifsTrendingGetWithHttpInfo($api_key, $limit, $rating, $fmt);
        return $response;
    }

    /**
     * Operation gifsTrendingGetWithHttpInfo
     *
     * Trending GIFs Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function gifsTrendingGetWithHttpInfo($api_key, $limit = null, $rating = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling gifsTrendingGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsTrendingGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.gifsTrendingGet, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/gifs/trending";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse200',
                '/gifs/trending'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stickersRandomGet
     *
     * Random Sticker Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $tag Filters results by specified tag. (optional)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2002
     */
    public function stickersRandomGet($api_key, $tag = null, $rating = null, $fmt = null)
    {
        list($response) = $this->stickersRandomGetWithHttpInfo($api_key, $tag, $rating, $fmt);
        return $response;
    }

    /**
     * Operation stickersRandomGetWithHttpInfo
     *
     * Random Sticker Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $tag Filters results by specified tag. (optional)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function stickersRandomGetWithHttpInfo($api_key, $tag = null, $rating = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling stickersRandomGet');
        }
        // parse inputs
        $resourcePath = "/stickers/random";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = $this->apiClient->getSerializer()->toQueryValue($tag);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2002',
                '/stickers/random'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stickersSearchGet
     *
     * Sticker Search Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $q Search query term or prhase. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse200
     */
    public function stickersSearchGet($api_key, $q, $limit = null, $offset = null, $rating = null, $lang = null, $fmt = null)
    {
        list($response) = $this->stickersSearchGetWithHttpInfo($api_key, $q, $limit, $offset, $rating, $lang, $fmt);
        return $response;
    }

    /**
     * Operation stickersSearchGetWithHttpInfo
     *
     * Sticker Search Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $q Search query term or prhase. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param int $offset An optional results offset. Defaults to 0. (optional, default to 0)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function stickersSearchGetWithHttpInfo($api_key, $q, $limit = null, $offset = null, $rating = null, $lang = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling stickersSearchGet');
        }
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling stickersSearchGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.stickersSearchGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.stickersSearchGet, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset > 100)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.stickersSearchGet, must be smaller than or equal to 100.');
        }
        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.stickersSearchGet, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/stickers/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse200',
                '/stickers/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stickersTranslateGet
     *
     * Sticker Translate Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $s Search term. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse2001
     */
    public function stickersTranslateGet($api_key, $s)
    {
        list($response) = $this->stickersTranslateGetWithHttpInfo($api_key, $s);
        return $response;
    }

    /**
     * Operation stickersTranslateGetWithHttpInfo
     *
     * Sticker Translate Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param string $s Search term. (required)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function stickersTranslateGetWithHttpInfo($api_key, $s)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling stickersTranslateGet');
        }
        // verify the required parameter 's' is set
        if ($s === null) {
            throw new \InvalidArgumentException('Missing the required parameter $s when calling stickersTranslateGet');
        }
        // parse inputs
        $resourcePath = "/stickers/translate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($s !== null) {
            $queryParams['s'] = $this->apiClient->getSerializer()->toQueryValue($s);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse2001',
                '/stickers/translate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stickersTrendingGet
     *
     * Trending Stickers Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return \GPH\Model\InlineResponse200
     */
    public function stickersTrendingGet($api_key, $limit = null, $rating = null, $fmt = null)
    {
        list($response) = $this->stickersTrendingGetWithHttpInfo($api_key, $limit, $rating, $fmt);
        return $response;
    }

    /**
     * Operation stickersTrendingGetWithHttpInfo
     *
     * Trending Stickers Endpoint
     *
     * @param string $api_key Giphy API Key. (required)
     * @param int $limit The maximum number of records to return. (optional, default to 25)
     * @param string $rating Filters results by specified rating. (optional)
     * @param string $fmt Used to indicate the expected response format. Default is Json. (optional, default to json)
     * @throws \GPH\ApiException on non-2xx response
     * @return array of \GPH\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function stickersTrendingGetWithHttpInfo($api_key, $limit = null, $rating = null, $fmt = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling stickersTrendingGet');
        }
        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.stickersTrendingGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.stickersTrendingGet, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/stickers/trending";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($fmt !== null) {
            $queryParams['fmt'] = $this->apiClient->getSerializer()->toQueryValue($fmt);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GPH\Model\InlineResponse200',
                '/stickers/trending'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GPH\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GPH\Model\MetaObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
